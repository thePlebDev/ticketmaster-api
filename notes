
(DONE)1) NAVBAR
2)THE API CALL
2) STYLE THE HOME PAGE
---------desktop version----------------




CREATING THE NAVBAR:
- so I think that this is going to be a pretty normal nav-barand the only thing I want on it is a big old search input
with a search Icon
-  the first thing that we are going to do is to create the fake data that is going to go into our NavBar in the app folder

- so we are going to create the hover index that will change depending on if we are hovering over the link or not
and the navOpen state. this state will be triggered when the nav menu is meant to be open or not.
- we have the ul and for each item in the fake data we are going to create a li will the appropriate stuff.

- so when creating a navigation we should keep a few thigns in mind and they are below

1) create a nav tag
2) create a ul element and have li elements inside of it
3) to make things more dynamic have the li be rendered from the props that are passed into the element. These are the
main steps once we have this in place then its pretty much just styling to do.
4) create a hover effect. this can be done with javascript and use state, while togeling a classname or you could just
use the pusedo css class
5) when we want to make the ul to be layed out properly we just set the display to flex and then use the flex box

CREATING THE RESPONSIVE NAVIGATION:
-we should actually do this first but, next time we do this first, it makes loading faster.
- damn so since I didnt make the RESPONSIVE navigation first
- so we got how we want it to look, lets see if we can get css transtions to work
- for right now the
- we got the animation figured out for the basic slide down of the menu. now lets work on the ref.

REACT REF:
- we are going to use a ref to check if a click is outside of the navbar or not
- we are going to have to use the useRef hook for this one.
- useRef returns a mutable object whose .current property is initialized to the passed argument
        const refContainer = useRef(initialValue)
- when we will first create the ref, we will set the initial value to null and then it will get its value
when we assign it to the object
- I think we will still have to hack around it but that shouldn't bee too bad.
- we are also going to use the useEffect ot add the event listener to the document to detect the click

REACT EVENT LISTENERS:
-react uses a single event listener per single event type to invoke all submitted handlers with the virtual dom
- so react uses only one event one event listener per event type to invoke all the submitted handlers of  the virtual
dom, this means that the there is on handler for click events and one for mouseon events and so on
- in react when an event happens react defines it as a synthetic event

- our event handlers will be passed instances of syntheticEvent, which is a cross-browser wrapper around the browser's
native event
- the syntheticEvent is pooled. This means that the syntheticEvent object will be resued and all the properties will
be nullified after the event callback has been invoked.
-so a synthetic event is just an object that gets created and has cross browser capability and has the same interface
as the native event.
-so pretty straight forward, very bueno.


DETECTING THE CLICK:
1) create the ref using node = useRef(null) make its initial value null. this creates an objec that will persist the full
lifetime of the object
2) assign it to the object. ref={node}. the ref object on the react element sets its current property to the
corresponding DOM node whenever that node changes
3) add the event listeners on the DOM but using useEffect make sure that they get cleaned up or eles we may get a
memory leak, that would be no bueno.


THE API CALLS:
-so it seems pretty straight forward. we send a request and get a response back. so we want to find music and tech events

music events:
- so we get 5000api requests per day and a rate limiting of 5 requests per second and the page size has to be smaller
than 1000 request items
- so it looks like we have the base url https://app.ticketmaster.com/discovery/v2/events.json?
- then we have the queries classificationName=music&dmaId=324
- followed by the api key &apikey=z8pipqaTCCTQc1R0OGDLl4bnygjdiXH3

classificationName: this helps with filtering for a genre
dmaId: is some kind of id that is used for filtering.
-so now I want to be able to get musiv events that are close to me
- the API, super easy, we just have to make sure to not send the api requests in the URL

- now we need to figure out how we are going to display the information. I really want a spinner like Netflix, so
lets try to make that.

WHEN DOES REACT DECIDE TO RERENDER SOMETHING:

1)a re-render can only be triggered if a component's state has changed,the props changing can count as a state change
-so more or less whenever something changes it causes a reload.


CREATING THE IMAGE SLIDER:
- so the first thing that we are going to do is to create a card that will be used to display the image. That card
is going to be passed the images. we wrap that card in two div components. the first div will be used to align the card
to the center of the page and the second div will be used to show all the cards next to eachother
- so we are going to loop over the images and for each image we are going to render a card. we will be using map()
for this.
- what does map do?. the map() method creates a new array populated with the results of calling a provided function on
every element in the calling array. so in our case it is going to create a new array that will have a card compoenent
for every image. Map takes a callback and calls it once for every element in the array that it is called on

-the desired effect after we loop over everything is that is should be a a bunch of images stacked on top of eachother

- on the wrapper div we want to set the display to flex so that we get them aligned side by side and then on the
card element itself we set flex to 1

WHITE SPACE TO THE RIGHT BUG:
- when this bug happens it seems to be due to some kind of disconnect with the html and the body, you need to apply the
following rules to the body and html. width and height both set to 100%, the margin and padding set to 0 and the
overflow-x set to hidden.

- then we are setting the wrapper to absolute and to create the scrolling effect we are just going to change its position.
form left to right, this will create the wanted scrolling effect

- The card-slider-element is the thing that is going to get animated. we have created a wrapper that contains every image
from our data and we are going to move that for our animation.
- so when we hit the next button we are going to move the card-slide-wrapper
- the card-slider is just for positioning the card-slider-wrapper in the middle of the page.
- we are going to build it one more time by guided and then we will try to make it in our own style for the
the attempt after that and really try to do things on our own. the last half of the video gets technical but we just
have to take things slow and we should be able to get through them just fine.


SASS LOOPS:

@for <varible> from <expression> to <expression> {...}
                or
@for <variable> from <expression> through <expression> {...}


CREATING THE IMAGE SLIDER:

1) create the card
- creating the card means creating how the layout will look.

2) create the surrounding divs
- this entails creating two divs one called image-slider and the other called image-slider-wrapper. the slider will
be used to display flex and will be used to center the thing on the screen its position will be set to relative.
so that in the future it will be used as the relative point for things that are set the position absolute.

3) map() over the info that we are getting back.
- in this app we have created some fake data but in real like this is where we would get the info back from the
backend and we would use that for the mapping
-simply call map on the data to create new images. this will create a new image component for every image that is
coming form the data.They should be aligned one on top of the other.

4) style the new image components
- on the image-slider-wrapper we need to set the display to flex, this will load the images and have them go off the page
make sure that overflow-X:hidden or else we will get a horzontal scroll bar and we do not want that.

5) make the image-slider-wrapper absolute
- this is actually what we will be animating. the image-slider-wrapper is a container for all the image components
and we will be moving it in order to create the illusion of a fluid scroll effect. This is why we are going to set
its position to absolute, so that we can freely manipulate the position of it with our buttons.

6) add the inline styles for the scrolling animation
- since it is the image-scroller-wrapper that is going to be doing the moving, we are going to give it an inline style.
The inline style is going to give us access to all the elements so it will allow us to do some calculations in order to
perform the right amount of sliding

                              'transform':`translateX(-${index*(100/fakeInfo.length)}%)`

- this transform property will give us the animation that we want. but what even is transform. transform allows us
to create alot of interesting things with css. it is diferent than translate in that it doesnt have the ability to
gradualy change over time but it can perform more complex stuff.
- the ::before and after elements allows us to insert content onto a page without it needing to be in HTML
- the after content is also "after" in source-order, so it will position on top of ::before if stacked on top of
eachother naturally


CREATING THE NEXTFLIX LIKE IMAGE SLIDER:

- so the staring premise is pretty basic, first we need to create a container with some items in it. set the outer
container to display: flex so that we can get the proper layout on the items. then we style the individual items
to get them the right size. we also put a transition property with the values of transform 300ms ease 100ms. so
that is telling us that we are going to do some transforms at some point

pushing the item to the left side:
- we have to move all of the elements to the left side of the container. So when we hover the contianer, all of
the elements should move to the left. we go:

                      .item-container:hover .item{
                        transform: translate(-25%);
                      }

  - this says that whenever we hover of the item container we want the individual items to move to the left -25%. This
  will get us a very smooth transition.

  sliding to the right:
  - the next thing to do is to make the element that is hovered on slide to the right.we do this with:

                    .item:hover ~ .item{
                      transform: translate(25%);
                    }

- this is saying that on the hover of an item we want the next item to be translated to the right by 25%. the result
is a pretty cool effect that relies on hovers to give the effect that the images are being shifted over as we go through
them.

- so basically all that we have done so far is create a container with items inside of it. set the display on the
container to be flex and then style the items to a width and height and on the items we set a translate that will allow us
to create a smooth transtion wil the hover effect
- so then go item.container:hover .item{transform:translate -25%} this will mean that when we hover over the image container
we are going to move all the items -25%
- then we go .item:hover ~ .item{transform: translate(25%)} this means that when we hover over an item the item to the
right of it will move to the right 25%

scaling effect:
- the last thing that we are going to do is apply the scaling effect, then thing that will make the item larger when we
hover over it.
- what we have to do is apply another transform with a scale of 1.5%
- the scaling will fill the gaps so that



CREATING THE SLIDER:
- so we know what we want a container with items in it that. SO I think that the main Idea of the slider
- so the first thing we need to do is to create an image container with a lot of items inside of it and have them go off
screen

- I need to figure out how to get the images to show side by side and have them go off screen. so we have gotten the items
to display off screen, not 100% sure how but it happened and that is ok with me. when I created some dummy elements with
just divs they all stayed on screen but when I mapped over the items from the fake info and put everything into a compoenent
then it seemed to work
- Now I have to create the buttons. Now that I have the buttons. I need to do a transform on the image-container-wrapper
to make it move to the left or the right. nextflix uses a translate3d, whatever, that is.
- to create the sliding effect on the slider we are going to have to move it with the transform attribute on the slider-wrapper
because that is the thing that is going to move positions. so the moving the position wasn't actually that bad.
- so when creating a slider just think. I need a container and a container wrapper and then items inside of that container
wrapper. The animation is just moving over the image-slider-wrapper a specified amount with transform:translateX()

- the next thing that we want to create is the the hover effects
- so to do the hover effects we need to create a pushing or the elments to the right and a pushing of the element to the left
and then have the image scale up to fit the gap
- first create the image sliding over to the left

CREATING THE HOVER EFFECT:
-this is basically us creating an element that moves the other elements to the right, left and then scales up to fill
the space that is left over
- the first thing that we are going to do is to push the element to the left. we do this by

      item-wrapper-container:hover .item{
          transform: translateX(-25%)
      }

- this is saying that when we hover over the item-wrapper-contianer it is going to push the current item over to the left

- then we are going to push stuff over to the right

      item:hover ~ item{
        transform:translateX(25%)
      }

- this is saying that when ever we hover over an item we want the item to the right of it to move over to the right

- the last thing we do is scale up to the space provided

    item:hover{
    transform: scale(1.5);
    }

- this is just saying that when we hover over an item we want it to create the a scaled up version of the image.
- now I have to figure out the api.

WORKING WITH THE API:
- so we need to delete the fakeInfo and get that information from the api
- so lets just try to get the information that we want form the api, lets use the useEffect Hook
- we are also going to use axios for the api call
- now That I have made the API call I will have to do some big boy destrucuring because thye are giving me back a lot of info
- it says that we can create nested structures to pull out nested values from the objects.
- the array of data that we now have is the result of the two events. then we want to go through that array and pull
out the images of each one

- so we will go in and get an array like we have, then we want to loop over the array and pull out the images form
the image array
-when are using useEffect it will normally run when the component runs and also when the component updates, this can
reslut in a bug when the whole page just keeps reloading over and over.so we provide useEffect with an empty dependency array
- so an empty dependency array on the useEffect means that it only runs once when the component mounts

- so right now we still need to be able to get stuff out from data
- I think we want to create our own hook here. we want the hook to be given the initila data filtered form the api request
- we want the hook to grab the names and the first image from the data that we recieve and to return those values

CREATING THE HOOKS:
-a custom hook is a javascript function thats name starts with "use" and that may call other hooks
- nothing specail about it except to make sure that the name starts with use.
- so the custom hook was a bit of a red harren.

- I want to get the name next. I have the name now I want to make a redirect based on what was clicked.
- so I need to now That I have the id and the api call. I have to work out the redirecting, I am pretty sure it has
something to do with the history object from react router

- the easiest way to redirect is to use the redirect component. so the redirect component is literally a thing from
react-router-dom. import { Redirect } from 'react-router-dom'

- so I think that we have to mess around with the history object.

THE HISTORY OBJECT:
-when we use the .push() on the history object we are just pushing stuff on the history stack.
- the useHistory hook gives us access to the history instance that we can use to navigate


so what info do I want for the individual pages? this is actually a chance to make things pretty

1) the image
2)the name
3)status
4)attractions -> name
5) seating map

- so first lets make the request. so we got the first request down but now I want to make an enviroment varible for
my API key.

ENVIROMENT VARIBLE:
- it is a key value pair that is stored on the local systme where your code/app is being run and is accessible from
within the code. THis will help us not accendentialy commit something to git hub

- we can use printenv to see all the environment variables.
- we create a local file with the api keys inside of it and then we use the source command to source the file into
the local enviroment.
-ok so maybe we don't use that because we don't have access to the source command, that seems like an linux thing

- the best way to store secrets in our app is not to store secrets in our app
- so I guess I don't really have to worry about securly storing this api key I will just put my credentials in a seperate
file and sure that I do not commit it
- so that made us get the dreaded CORS error. Now I have to figure out why that is happening.
- why are we getting the CORS error? the error is coming from the browser implementing the same-origin policy
- this fights one of the most common cyber attacks out there: cross-site request forgery. this is where a malicious website
attempts to take advantage of the browser's cookie storage system. for every HTTP request to a domain, the browser
attaches any HTTP cookies associated with that domain. this is useful for authentication and setting sessions.
- every time you click around facebook and don't have to log in over and over again is because the API recognize the
stored session cookie upon further HTTP-requests

-So I guess I should probably try to understand what CORS is. it is a mechanism that uses additional HTTP headers
to tell browsers to give a web application running at one origin, access to selected resources from a different origin
- a web application executes a cross-origin HTTP request when it requests a resource that had a different origin from
its own.
CORS = cross-origin-resource sharing. a web aplication makes a CORS request when it requests a resource that has a
different origin from its own.
- for security reasons, browsers restrict cross-origin HTTP requests initiated from scripts.
-XMLHttpRequest and the Fetch API follow the same-origin policy. This means that a web application using those APIs
can only request resources from the same origin the application was loaded from unless the response from other
origins includes the right CORS headers. So my problem is that i dont have the right request headers?

- some requests don't trigger a CORS preflight. turns out my api call was just wrong.....

-now I need to figure out how to control the value of select tags in React. ya so we need to set the values of there
stuff to be a react value, so that means we need a handle change and to set the value to the value that is a React state

-so now lets look at the api docs and see what values we can use to filter for distance and categories.

for the info that I want form the api, I want the dates,title and the location
- now I am going to do up the styling. so I think I have the basic styling down, now I want to create a modal to pop up
everytime that I click the icon

- so the basic Idea is that we have a modal that will appear and disapear based on the toggeling of a state. The state
value trigger will be the weird little icon
- so first lets get to creating how the modal will look.

TRANSITIONING WITH REACT TRANSTION GROUP:

- so the transition component works by animating the mounting and unmounting of a component, but it can also be used to describe
in-place transition. But what even is mounting.

mounting:
- the main job is to figure out how to modify the DOM to match what the components want to be rendered on the screen
- react does this by mounting, which means adding nodes to the DOM. Unmounting means removing them from the DOM and
updating/making changes to nodes already in the DOM.
- so bascially mounting is just when react renders a component. so I think that it is going to work or us

- the 4 main states a Transition can be is 'entering', entered, exiting and exited.
-the transtion is toggeled via the in prop. When true the component begins to "Enter" stage. During this stage, the component will
shift from its current transition state to entering fro the duration of the transition and then to the 'entered' stage once its
complete
- so first we will define a duration variable, this will be how long the transition will take place
- so looks like we will define our default styles, that is going to be height of 0 and a display of none;
- then we define the transition styles with entering entered, exiting and exited
- then we wrap what we want to animate inside of a Transition component.

- we are going to create a new file for the transition values  and I am going to use IIFE for creating the module.
        const thingy = (function(){
                  statements...
        })();

- using iife will make sure that we do not pollute the global state.
-an IIFE is a way to execute functions immediately, as soon as they are created. the function syntax doesnt matter.
- so the transition is toggeled via the in prop

- the arrow function that uses state is called a function child and it is used instead of a React element. This function is called
with the current transition status(entering,entered,exiting,exited). Whichcan be used to apply specific props to a component.
but it doesnt look like its necessary. never mind it looks very necessary.


REST PARAMETERS:
- the rest parameter is indicated by three dots(...) preceding a named parameter, that named parameter becomes an Array
containing the rest of the parameters passed to the function. this is where the name rest comes from
- so three dots before a parameter means the rest of those parameters. the Rest parameters seems like it is only used in a function
- there can actually only be one rest parameter and it has to be last.
- I think what we want to know is the spread operator

THE SPREAD OPERATOR:
-The rest parameter allows us to specify that multiple independent arguments should be combined into an array
- the spread operator allows us to specify an array that should be split and passed in as seperate arguments to a function
- so when we are using it we are saying that we want to spread out all the values that are inside of it


REACT TRANSITION GROUP ANIMATIONS:
- it allows us to animate when the component is being mounted, unmounted and when it is show
- the CSSTransition allows us to do the animation in css
- the CSSTransition gives us access to stages and then we can use them to animate inside of css 
